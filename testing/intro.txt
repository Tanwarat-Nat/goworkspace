test file จะลงท้ายด้วย _test.go
main.go --> เป็น execute, real program/ real business จะอยู่ในนี้
แล้วก็จะมีเทสอยู่ 2 ตัว ง่ายๆ hello_test.go, world_test.go 
วิธีการ run ใช้ comand run go test อย่างเดียว

เวลาเรา run มันก็จะ scan ดูว่าอะไรที่ลงท้ายด้วย _test.go ก็จะจับมันมา แล้วก็ทำการ
generate temporary package อันนึง แล้วมาเรียก function ที่อยู่ภายใน test.go
จากนั้นก็ build temporary ตรงนี้ แล้วก็ run พอ run เสร็จแล้วก็ report ออกมาให้เราว่า
อันไหนผ่าน อันไหนไม่ผ่าน

ในทางทฤษฎี เขียนเทสก่อน แล้วค่อยเขียนโค้ด แต่ในทางปฏิบัติเราจะเขียนเทสได้ยังไงถ้าเราไม่รู้ว่า
business logic ของเรา flow ไปแบบไหน แล้วเราต้องการ function แบบไหน ดังนั้นในทาง
ปฏิบัติจริงๆแล้วเราก็เขียนโค้ดไปเรื่อยๆ พอไปภึงจุดนึง เราก้อยากได้ function นึง สมมติว่าเป็น add

x := add(1,3)
x .....
fmt.Prinrtln(x)

แล้ว add นี้ก็จะต้อง return เป้น 4 กลับไป เราจะไม่ไปเสียเวลโฟกัสาว่า
function นี้จะ implement ยังไง เราก็จะมา flow ดูก่อนว่า จากนั้นเราก็เอา x ไป perform
business logic อื่นๆต่อไป แล้วสุดท้ายก่อนที่เราจะมาเขียน เราก็จะเห้ย function นี้มันรับ
signature ของมัน มันก็จะมี 2 integer มันก็จะ return integer

------ อันนี่จะยังไม่ทำ-----------
( เราก็จะมาขึ้น function add(a,b int) int{
	return a+b
}

เราจะไม่เสียโฟกัสของเรามากับอะไร function ตรงนี้ก่อน )

------ ข้ามมาทำนี่ก่อน -------------
พอเราทำตรง x := add(2,3) ตรงนี้เสร็จ เราก็จะมาสร้าง test ที่ perform real operation จริงๆ
ใน funcrion นี้

อันนี้คือความต่างระหว่าทฤษฎีกับปฏิบัติ พอเป็นแบบนี้ เราก็จะมาสร้าง function อันนึง เพื่อจะ
test add() ตรงนี้ ไฟล์ที่เราจะสร้าง อะไรก็ตามที่ลงท้ายด้วย _test.go ก็จะเป็นไฟล์ test
 ทีนี้เราจะเขียน test function ใน add_test.go เพื่อทำการตรวจสอบว่า function 
 ที่เราเขียนใน main.go ถูกมั้ย ดังนั้นในไฟล์ add_test.go จะมาเรียก function ที่อยู่ภายใน
main.go