benchmark ก็คือการเทสว่า function ไหน perform ได้เร็วที่สุด
function ไหน perform ใช้เวลาในการ execute ใน function นั้นๆเร็วที่สุด
แต่ถึงเราจะรู้ว่า function ไหนทำงานได้เร็วที่สุด ก็ไม่ได้หมายความว่าถ้าเราใช้
function นั้นในโปรแกรมของเราจะทำให้โปรแกรมของเราเร็วขึ้นจริงๆ
เพราะว่าในความเร็วมันมีการเปรียบเทียบกันอยู่ มันมีความเร็วสัมพัทกันอยู่
ความเร็วของมอเตอร์ไซค์ก็ไม่สามารถไปสู้ความเร็วของรถยนต์ได้
ความเร็วของรถยนต์ที่วิ่งช้าวิ่งเร็วกว่ากัน ซุปเปอร์คาณ์ก็ไม่สามารถสู้ความเร็วของเครื่องบินได้
ดังนั้นถ้าเราควรจะโฟกัสที่ความเร็วจะทำให้โปรแกรมของเราได้เร็วขึ้นเราจะโฟกัสที่
มอไซค์ รถยนต์ หรือเครื่องบิน เราก้ต้องโฟกัสที่ area ที่เป็น critical จริงๆ
ที่มันดึงประสิทธิภาพทั้งหมดของโปรแกรมของเราลงมา ถ้าเราแก้จุดนั้นปุ๊ปก็หมายความว่า
ที่เหลือมันจะช้านิดหน่อยก็ไม่เกี่ยว คือคนเราไม่สามารถรู้สึกได้เลย

Profile คือการที่เราพยายามหาว่าโปรแกรมของเราใช้่ memory ตรงไหนไปเท่าไหร่ยังไง
ใช้ cpu ตรงไหนไปเท่าไหร่ยังไง มี gorotine ตรงไหน execute มี gorotine ตรงไหน
เกิดตายตรงไหนบ้าง เราก็จะเห็นประสิทธิภาพเห็นภาพรวมทั้งหมดของโปรแกรมเรา
เราก็สามารถชี้ชัดไปได้ว่า จุดนี้นะมันช้า จุดนี้นะใช้ rsult เยอะเกินไป เราก็จะไปโฟกัสที่ตรงนั้น
พอโฟกัสที่ตรงนั้นปุ๊ปเราก่็สามารถเขียนโค้ดปรับปรุงให้มันดีขึ้นได้

ที่พูดมาทั้งหมด มันก็คือการเปรียบเทียบ 98% กับ 3% มีคำพูดในวงการคอมเขาบอกว่า
โปรแกรมเมอร์ใช้เวลาเกือบ 98% ในเวลาการทำงานของเขาเพื่อจะไปพัฒนาประสิทธิภาพ
ในสิ่งที่เล็กน้อยเหมือนขี้ช้างจับตั๊กแตน ใช้เวลาไปตั้งเยอะเพื่อเปลี่ยน performance ได้นิดเดียว
หรือแทบจะไม่รู้สึกเลย เช่น ถ้าเราโอ้วว ใช้ if ตรงนี้ ประกาศ variable ไว้ตรงนี้
แล้วก็ append แบบนั้นแบบนี้ ไม่ต้อง append จอง memory ดีกว่า คือเรามโนไปเอง
แล้วคิดว่ามันจะดีมันจะเวิร์ค เราเดินวนเวียนอยู่ภายใน 98% ซึ่งไม่ค่อยมีค่าอะไรมากเลย
กลับกันอีก 3% ที่มีความสำคัญมากเลย ที่เราควรจะไปโฟกัส ไม่ใข่ว่าเราไม่อยากไปโฟกัส
แต่ปัญหาของเราคือ เราไม่รู้ว่ามันอยู่ตรงไหน เราไม่รู้ว่า 3% นั้นมันอยู่ส่วนไหนของโปรแกรม
เปรียบเทียบให้ด฿ชัดอีกทีก็คือ  ท้ายหมากรุกตัวเบี้ยเล็กๆเหล่านี้มันไม่ค่อย powerfull
ถ้าเราจัดการตัวใหญ่ได้ ถ้าเราจัดการตัว king ได้ เกมส์ทั้งหมดจบเลย จัดการ gueen ได้
คู่ต่อสู้อ่อนแรงลงไปเยอะเลย เราต้องโฟกัสที่ตัวใหญ่ เราไม่เสียเวลากับตัวเล็ก แต่ก็ใช่ว่าจะไม่มี
ความสำคัญ

Go เตรียมอัะไรไว้ให้บ้าง
- CPU profile : ไว้ดูการทำงานของ cpu
- Heap profile : ไว้ดูว่าโปรแกรมของเราใช้ memory มากน้อยขนาดไหน
- Blocking profile: อยากรู้เรื่อง concurency เรื่องการใช้ gorutine ของเราก็มาวิเคราะห์ตรงนี้
ก็จะเห็นภาพได้ชัดขึ้น

ถ้าเรา profile หลายๆตัวพร้อมกัน มันจะไม่ค่อยเวิร์ค ควร profile ทีละอัน
ซึ่งการ profile แต่ละครั้งก็จะเกิด output ออกมา เป็นอะไรที่มองด้วยตาเปล่าไม่เข้าใจ
ต้องใช้โปรแกรม go tool pprof เอามาอ่าน พออ่านเสร็จจะออกมาในรูปภาษาคน 
จะออกมาในรูป text จะออกมาในรูป browser ก็ว่ากันไป

เราจะมาเริ่มจากการ profile ใน function ที่เราเขียน  อาจจะไม่ได้ผลลัพธ์ที่มีค่ามากมาย
แต่อย่างน้อยเราก็รู้วิธีการใช้ tool สุดท้ายแล้วเราก็จะไป profile ใน standard libary ของ go
1.ไปดู prime number ใน benchmark ไฟล์ prime_test.go
2.$ go test -bench . testing\bench ให้แน่ในว่าทุกอย่างรันผ่าน สุดท้ายเราจะมารันแค่ primenumber
3. ใน bench อยากให้ไปจับกับฟังก์ชั่นนี้อย่างเดียว BenchmarkIsPrime 
เราก็จะใช้ regular expression +$ 
$ go test -bench BenchmarkIsPrime$ testing\bench
มันจะไปจับสุดท้ายว่าอะไรก็ตามที่ลงท้ายด้วย BenchmarkIsPrime ตรงนี้มันก็จะเทสแค่ฟังก์ชั่นนั้น
ฟังก์ชั่นเดียว อันอื่นมันมีลงท้าย V2 V3

เราจะเอาตรงนี้แหละมา profile cpu
4.ctrl+c --> ls ดูก่อนว่าตอนนี้ยังไม่มีอะไร
5.เวลาเราต้องการจะสร้างกล่องสี่เหลี่ยมลูกบาศก์(center)ที่เราเห็นตรงนี้ เราอยากให้กล่องตรงนี้
out put ตรงนี้มันรับอะไร cpu profile ใช่มั้ย
6.$ go test -bench BenchmarkIsPrime$ -cpuprofile=primecpu.out testing\bench
มันก็จะรันสุดท้ายเราก็จะได้ profile cpu ของเรา primecpu.out ให้ ls ดู
ึ7.$ cat primecpu.out ไปแคทดูจะเห็นเป็นไบนารี่ ไม่สามารถอ่านได้ มันก็คือตัวกล่องลูกบาศก์นี่เอง
8.$ go tool pprof -text primecpu.out ใช้ tool ช่วยอ่านให้ out put มาเป็น text
แล้วก็จะเห็นผลว่าใช้ cpu ไปเท่านี้ๆๆ
9.ถ้าเราต้องการให้ดูผ่านเว็ป ก้ทำแบบนี้ได้ $ go tool pprof -web primecpu.out